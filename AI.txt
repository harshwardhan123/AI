#DFS_BFS_REC
from collections import deque
class graph:
	def __init__(self,edge,n):
		self.adjList={}
		for i in range(n):
			self.adjList[i]=[]
		for (src,dest) in edge:
			self.adjList[src].append(dest)
			self.adjList[dest].append(src)

def recBFS(graph,q,discovered):
	if not q:
		return
	v=q.popleft()
	print(v,end=" ")
	for u in graph.adjList[v] :
		if not discovered[u]:
			discovered[u]= True
			q.append(u)
	recBFS(graph,q,discovered)

def DFSrec(graph,v,discovered) :
	print(v,end=" ")
	for  u in graph.adjList[v]:
		if not discovered[u]:
			discovered[u]=True
			DFSrec(graph,u,discovered)


if __name__ == '__main__' :
	edge=[(0,1),(0,2),(1,3),(1,4),(2,5),(2,6)]
	n=7
	graph=graph(edge,n)
	discovered=[False] * n
	q=deque()
	print ("Recursive BFS->")
	for i in range(n):
		if not discovered[i] :
			discovered[i]=True
			q.append(i)
			recBFS(graph,q,discovered)
			
	print ("\n Recursive DFS->")
	discovered=[False] * n
	discovered[0]=True
	DFSrec(graph,0,discovered)












#Astar

class Node:
    def __init__(self,h,name):
        self.f = 0
        self.g = 99999
        self.h = h
        self.name = name

    def setNeighbours(self, neighbours={}):
        self.neighbours = neighbours


# assume a 5 node bidirectional graph as follows
graph = [
    [-1, 1, 4, -1, -1],
    [1, -1, 2, 5, 12],
    [4, 2, -1, 2, -1],
    [-1, 5, 2, -1, 3],
    [-1, 12, -1, 3, -1]  # g(n)
]

# assume heuristics for each node
heuristics = [7, 6, 2, 1, 0]  # H(n)

s = Node(7,0)
a = Node(6,1)
b = Node(2,2)
c = Node(1,3)
d = Node(0,4)

s.setNeighbours([a, b])
a.setNeighbours([s, b, c, d])
b.setNeighbours([s, a, c])
c.setNeighbours([a, b, d])
d.setNeighbours([a, c])

startNode = s
goalNode = d


def astar(start, goal):
    closedSet = set([])
    openSet = set([start])
    cameFrom = {}
    start.g = 0
    start.f = start.h

    while len(openSet) != 0:
        current = findNodeWithLowestFScore(openSet)
        if current == goal:
            return contruct_path(cameFrom, current)
        openSet.remove(current)
        closedSet.add(current)
        # print(current.name, current.f, current.g, current.h)
        for neighbour in current.neighbours:
            # print(neighbour.name, neighbour.f, neighbour.g, neighbour.h)
            if neighbour in closedSet:
                continue
            if neighbour not in openSet:
                openSet.add(neighbour)
            tentative_gScore = current.g + graph[current.name][neighbour.name]
            # print(tentative_gScore)
            if tentative_gScore >= neighbour.g:
                continue
            cameFrom[neighbour] = current
            neighbour.g = tentative_gScore
            neighbour.f = neighbour.g + neighbour.h
    return -1


def findNodeWithLowestFScore(openSet):
    fScore = 999999
    node = None
    for eachNode in openSet:
        if eachNode.f < fScore:
            fScore = eachNode.f
            node = eachNode
    return node


def contruct_path(cameFrom, current):
    totalPath = []
    while current in cameFrom.keys():
        current = cameFrom[current]
        totalPath.append(current)
    return totalPath


if __name__ == "__main__":
    path = astar(startNode, goalNode)
    print("Path is : ", end="")
    for node in path[::-1]:
        print(str(node.name) + "-->", end="")
    print(goalNode.name)
    print("\nCost = " + str(goalNode.g))










#PRIMS
INF = 9999999
N=5

G=[[5,7,4,3,2],
  [4,3,1,0,2],
  [0,1,2,3,4],
  [5,0,0,3,4],
  [0,5,2,3,1]]
  
selected_node = [0,0,0,0,0]
no_edge = 0
selected_node[0]=True
  
  #print
print("Edge:Weight/n")
while(no_edge<N-1):
  minimun = INF
  a=0
  b=0
for m in range(N):
    if selected_node[m]:
      for n in range (N):
        if (not selected_node[n]) and G[m][n]:
       
          if minimum > G[m][n]:
           minimum = G[m][n]
           a=m
           b=n
    print(str(a) + "-" + str(b) +":"+ G[a][b])
    selected_node[b] =True
    no_edge += 1       
       










##Branch and Bound
n = 4
a = [[0 for x in range(n)] for y in range(n)]
b = {}
def isColumnSafe(r,c):
    while(r>=0):
        if (a[r][c]==1):
            return 0
        r=r-1
    return 1
def isLeftDiagonalSafe(r,c):
    while(r>=0 and c>=0):
        if(a[r][c]==1):
            return 0
        r=r-1
        c=c-1
    return 1
def isRightDiagonalSafe(r,c):
    while(r>=0 and c<n):
        if(a[r][c]==1):
            return 0
        r=r-1
        c=c+1
    return 1
def isSafe(row,col):
    if(isColumnSafe(row,col)== 0):
        return 0
    if(isLeftDiagonalSafe(row,col)==0):
        return 0
    if(isRightDiagonalSafe(row,col)==0):
        return 0
    return 1

def checkBoard(r,c):
    if(r>=n):
        return
    p=0
    while(c<n):
        p = isSafe(r,c)
        if(p==1):
            a[r][c] = 1
            b.update({r:c})
            break
        c=c+1
    if(p==1):
        checkBoard(r+1,0)
    else:
        a[r-1][b.get(r-1)]=0
        checkBoard(r-1,int(b.get(r-1))+1)

if __name__ == '__main__':
    checkBoard(0,0)
    print(a)























#N_Queens:
print("Enter the number of queens")
N = int(input())

board = [[0] * N for _ in range(N)]

def is_attack(i, j):
    for k in range(N):
        if board[i][k] == 1 or board[k][j] == 1:
            return True
    for k in range(N):
        for l in range(N):
            if (k + l == i + j) or (k - l == i - j):
                if board[k][l] == 1:
                    return True
    return False

def N_queen(n):
    if n == 0:
        return True

    for i in range(N):
        for j in range(N):
            if not is_attack(i, j) and board[i][j] != 1:
                board[i][j] = 1
                if N_queen(n - 1) == True:
                    return True
                board[i][j] = 0

    return False

if N_queen(N) == False:
    print("No solution exists.")
else:
    print("Solution found!")
    for row in board:
        print(row)









#chatbot
pip install --user -U nltk
import nltk
from nltk.chat.util import Chat, reflections
pairs=[
#
[
r"my name is (.)",
["Hello %1, How are you"]
],
# Or expression
[
r"Hi|Hello|Hey there|Hola",
["Hello my name is Hiesenberg"]
],
[
r"what is your name ?",
["I am a bot created by Heisenbergwhat. you can call me crazy!",]
],
[
r"how are you ?",
["I'm doing good How about You ?",]
],
[
r"sorry (.*)",
["Its alright","Its OK, never mind",]
],
[
r"I am fine",
["Great to hear that, How can I help you?",]
],
[
r"I (.*) good",
["Nice to hear that","How can I help you?:)",]
],
[
r"(.*) age?",
["I'm a computer program dude Seriously you are asking me this?",]
],
[
r"what (.*) want ?",
["Make me an offer I can't refuse",]
],
[
r"(.*) created ?",
["Yashashree and Sakshi created me using Python's NLTK library ","top secret ;)",]
],
[
r"(.*) (location|city) ?",
['Indore, Madhya Pradesh',]
],
[
r"how is weather in (.*)?",
["Weather in %1 is awesome like always","Too hot man here in %1","Too cold man here in %1","Never even heard about %1"]
],
[
r"i work in (.*)?",
["%1 is an Amazing company, I have heard about it. But they are in huge loss these days.",]
],
[
r"(.*)raining in (.*)",
["No rain since last week here in %2","Damn its raining too much here in %2"]
],
[
r"how (.*) health(.*)",
["I'm a computer program, so I'm always healthy ",]
],
[
r"(.*) (sports|game) ?",
["I'm a very big fan of Football",]
],
[
r"who (.*) sportsperson ?",
["Messy","Ronaldo","Roony"]
],
[
r"who (.*) (moviestar|actor)?",
["Brad Pitt"]
],
[
r"i am looking for online guides and courses to learn data science, can you suggest?",
["Crazy_Tech has many great articles with each step explanation along with code, you can explore"]
],
[
r"quit",
["Thank you for using our intelligence services"]
],
]
def chat():
print("Hey there! I am Heisenberg at your service")
chat = Chat(pairs)
chat.converse()
if __name__== "__main__":
chat()









#Expert system

Medical Expert System â€“
main.py
from experta import *
import ast
class MedicalExpert(KnowledgeEngine):
username = "",
@DefFacts()
def needed_data(self):
"""
This is a method which is called everytime engine.reset() is called.
It acts like a constructor to this class.
"""
yield Fact(findDisease = 'true')
print("Hi! I am Mr.Expert.\n\nYou can get yourself diagnosed here free of cost!\nI will ask you 10 questions.\n\n")
@Rule(Fact(findDisease = 'true'),NOT(Fact(name=W())),salience = 1000)
def ask_name(self):
self.username = input("What's your name?\n")
self.declare(Fact(name=self.username))
@Rule(Fact(findDisease='true'), NOT (Fact(chestPain = W())),salience = 995)
def hasChestPain(self):
self.chest_pain = input("\nDo you have chest pain?\nPlease type Yes/No\n")
self.chest_pain = self.chest_pain.lower()
self.declare(Fact(chestPain = self.chest_pain.strip().lower()))
@Rule(Fact(findDisease='true'), NOT (Fact(cough = W())),salience = 985)
def hasCough(self):
self.cough = input("\nDo you have cough?\nPlease type Yes/No\n")
self.cough = self.cough.lower()
self.declare(Fact(cough = self.cough.strip().lower())
@Rule(Fact(findDisease='true'), NOT (Fact(fainting = W())),salience = 975)
def hasFainting(self):
self.fainting = input("\nDo you faint occasionally?\nPlease type Yes/No\n")
self.fainting = self.fainting.lower()
self.declare(Fact(fainting = self.fainting.strip().lower()))
@Rule(Fact(findDisease='true'), NOT (Fact(fatigue = W())),salience = 970)
def hasFatigue(self):
self.fatigue = input("\nDo you experience fatigue occasionally?\nPlease type Yes/No\n")
if(disease == 'unknown'):
mapDisease = []
mapDisease.append('back_pain')
mapDisease.append('chest_pain')
mapDisease.append('cough')
mapDisease.append('fainting')
mapDisease.append('fatigue')
mapDisease.append('fever')
mapDisease.append('headache')
mapDisease.append('sore_throat')
mapDisease.append('restlessness')
mapDisease.append('sunken_eyes')
print('\n\nWe checked the following symptoms',mapDisease)
mapDisease_val=[self.back_pain,self.chest_pain,self.cough,self.fainting,self.fatigue
,self.fever,self.headache,self.sore_throat,self.restlessness,self.sunken_eyes]
print('\n\nSymptoms in patients are :', mapDisease_val)
file = open("disease_symptoms.txt", "r")
contents = file.read()
dictionary = ast.literal_eval(contents)
file.close()
yes_symptoms = []
for i in range(0,len(mapDisease_val)):
if mapDisease_val[i] == 'yes':
yes_symptoms.append(mapDisease[i])
max_val = 0
print('\n\nYes symptoms noticed are : ', yes_symptoms)
for key in dictionary.keys():
val = dictionary[key].split(",")
count = 0
print(key,":",val)
for x in val:
if x in yes_symptoms:
count+=1
#print('Count:',count)
if count > max_val:
max_val = count
pred_dis = key
if max_val == 0:
print("No diseases found.You are healthy!")
else:
print("\n\nWe are unable to tell you the exact disease with confidence.But we believe that you suffer from",pred_dis)
print('\n# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #')
print ('\n\nSome info about the disease:',pred_dis)
f = open("disease/disease_descriptions/" + pred_dis + ".txt", "r")
print(f.read())
print('# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #')
print('\n\nNo need to worry',self.username,'. We even have some preventive measures for you!\n')
f = open("disease/disease_treatments/" + pred_dis + ".txt", "r")
print(f.read())
print('\n# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #')
else:
print('The most probable illness you are suffering from is:',disease)
print('\n\n')
print('\n# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #')
print('Some info about the disease:\n')
print(disease)
f = open("disease/disease_descriptions/" + disease + ".txt", "r")
print(f.read())
print('\n# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #')
print('\n\nNo need to worry',self.username,'. We even have some preventive measures for you!\n')
f = open("disease/disease_treatments/" + disease + ".txt", "r")
print(f.read())
if __name__ == "__main__":
engine = MedicalExpert()
engine.reset()
engine.run()
print('Printing engine facts after 1 run',engine.facts)
training.py
import networkx as nx
import matplotlib.pyplot as plt # For drawing
from networkx.algorithms import bipartite
import ast
print('Reading disease and its symptoms.')
file = open("disease_symptoms.txt", "r")
contents = file.read()
dictionary = ast.literal_eval(contents)
file.close()
print('Now reading all distinct symptoms.')
file = open("symptoms.txt","r")
symptoms = file.read().split("\n")
file.close()
symptoms=symptoms[0:-2]
G=nx.Graph() # Create a graph
G.add_nodes_from(dictionary.keys(), bipartite = 0)
G.add_nodes_from(symptoms, bipartite=1)
for key in dictionary.keys():
u = key val = dictionary[key]
val = val.split(",") for v in val:
G.add_edge(u,v)
print('Graph nodes and edges created.')
X, Y = bipartite.sets(G)
pos=dict()
pos.update( (n, (1, i)) for i, n in enumerate(X) )
pos.update( (n, (2, i)) for i, n in enumerate(Y) )
color_map=[]
for node in X:
color_map.append('blue')
for node in Y:
color_map.append('green')
print(X) print(Y)
plt.title("Bipartite Knowledge Base")
nx.draw(G,node_color=color_map, with_labels = True,pos=pos) # Draw the graph
plt.savefig("graph.png") # Save to a PNG file


